<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'><nta>
	<declaration>const int team_members = 5;
const int opponents = 5;
const int tickrate = 4;
const double ball_speed = 15.0 / tickrate;
const double player_speed = 4.0 / tickrate;
const double position_factor = 1.0;
const double possesion_value = 10.0;
const double opponent_possesion_value = -50.0;
const int player_pos[team_members][2] = {{-40, -3},{-28, -22},{-20, -20},{-13, 14},{-11, -20}};
const int opponent_pos[opponents][2] = {{-29, 3},{-25, -22},{-27, -8},{-22, 10},{-10, 1}};
typedef int[0, team_members - 1] player_id_t;
clock T = 0.0;
double reward = 0.0;
chan receive[team_members];
int pass_target = -1;
double distance_between(double x1, double y1, double x2, double y2){
    return hypot(x1 - x2, y1 - y2);
}
int time_to_pass(player_id_t from, player_id_t to){
    double distance = distance_between(player_pos[from][0], player_pos[from][1], player_pos[to][0], player_pos[to][1]);
    return fint(ceil(distance / ball_speed));
}
const int pass_time[team_members][team_members] = {{0, time_to_pass(0, 1), time_to_pass(0, 2), time_to_pass(0, 3), time_to_pass(0, 4)}, {time_to_pass(1, 0), 0, time_to_pass(1, 2), time_to_pass(1, 3), time_to_pass(1, 4)},{time_to_pass(2, 0), time_to_pass(2, 1), 0, time_to_pass(2, 3), time_to_pass(2, 4)}, {time_to_pass(3, 0), time_to_pass(3, 1), time_to_pass(3, 2), 0, time_to_pass(3, 4)}, {time_to_pass(4, 0), time_to_pass(4, 1), time_to_pass(4, 2), time_to_pass(4, 3), 0}};
int intercept_probability(player_id_t player, player_id_t target, int time){
    int i = 0;
    double prob = 0.0;
    while(i &lt; opponents){
        double dist = distance_between(player_pos[target][0], player_pos[target][1], opponent_pos[i][0], opponent_pos[i][1]);
        double time_to_reach = dist / player_speed;
        double time_within_reach = time - time_to_reach;
        if(time_within_reach &gt; 0){
            prob = prob + 15.0;
        }
        i += 1;
    }
    return fint(round(prob));
}
double pass_reward(player_id_t from, player_id_t to){
    int x_progression = player_pos[to][0] - player_pos[from][0];
    if (player_pos[from][0] &lt; player_pos[to][0]){
        return abs(x_progression);
    }
    if (x_progression &lt; 0) {
        return x_progression * 2;
    }
    return x_progression;
}
</declaration>
	<template>
		<name x="5" y="5">TeamPlayer</name>
		<parameter>const player_id_t id</parameter>
		<declaration>clock X;</declaration>
		<location id="id0" x="-3493" y="493">
			<name x="-3519" y="450">Dribble</name>
		</location>
		<location id="id1" x="-2363" y="493">
			<name x="-2345" y="484">Free</name>
		</location>
		<location id="id2" x="-3323" y="492">
			<name x="-3383" y="450">InPossesion</name>
			<urgent />
		</location>
		<location id="id3" x="-3119" y="492">
			<name x="-3145" y="441">Passing</name>
			<label kind="invariant" x="-3179" y="458">X&lt;=pass_time[id][pass_target]</label>
		</location>
		<location id="id4" x="-2592" y="492">
			<committed />
		</location>
		<location id="id5" x="-3034" y="195">
			<name x="-3051" y="161">Start</name>
			<urgent />
		</location>
		<location id="id6" x="-3161" y="322">
			<label kind="invariant" x="-3144" y="322">X&lt;=1</label>
		</location>
		<branchpoint id="id7" x="-2864" y="492">
		</branchpoint>
		<init ref="id5" />
		<transition>
			<source ref="id2" />
			<target ref="id0" />
			<label kind="assignment" x="-3476" y="510">reward = reward + 5</label>
		</transition>
		<transition controllable="false">
			<source ref="id6" />
			<target ref="id2" />
			<label kind="guard" x="-3280" y="364">X==1</label>
		</transition>
		<transition controllable="false">
			<source ref="id5" />
			<target ref="id1" />
			<label kind="guard" x="-2813" y="272">id != 0</label>
		</transition>
		<transition controllable="false">
			<source ref="id5" />
			<target ref="id6" />
			<label kind="guard" x="-3153" y="237">id == 0</label>
			<label kind="assignment" x="-3272" y="381">X=0</label>
		</transition>
		<transition controllable="false">
			<source ref="id3" />
			<target ref="id7" />
			<label kind="guard" x="-3102" y="510">X&lt;=pass_time[id][pass_target]</label>
		</transition>
		<transition>
			<source ref="id7" />
			<target ref="id4" />
			<label kind="assignment" x="-2855" y="551">reward = 0</label>
			<label kind="probability" x="-2856" y="534">intercept_probability(id, pass_target, pass_time[id][pass_target])</label>
			<nail x="-2856" y="526" />
		</transition>
		<transition>
			<source ref="id7" />
			<target ref="id4" />
			<label kind="synchronisation" x="-2855" y="423">receive[pass_target]!</label>
			<label kind="assignment" x="-2856" y="399">reward = reward + pass_reward(id, pass_target)</label>
			<label kind="probability" x="-2855" y="440">10</label>
			<nail x="-2856" y="458" />
		</transition>
		<transition controllable="false">
			<source ref="id4" />
			<target ref="id1" />
			<label kind="assignment" x="-2550" y="501">X=0, pass_target = -1</label>
		</transition>
		<transition>
			<source ref="id1" />
			<target ref="id2" />
			<label kind="synchronisation" x="-2974" y="678">receive[id]?</label>
			<label kind="assignment" x="-2974" y="644">X = 0</label>
			<nail x="-2363" y="629" />
			<nail x="-3323" y="620" />
		</transition>
		<transition>
			<source ref="id2" />
			<target ref="id3" />
			<label kind="select" x="-3280" y="515">target : player_id_t</label>
			<label kind="guard" x="-3255" y="532">target != id</label>
			<label kind="assignment" x="-3289" y="551">pass_target = target</label>
		</transition>
	</template>
	<system>player0 = TeamPlayer(0);
player1 = TeamPlayer(1);
player2 = TeamPlayer(2);
player3 = TeamPlayer(3);
player4 = TeamPlayer(4);
system player0, player1, player2, player3, player4;</system>
	<queries>
		<query>
			<formula>strategy BestPasses = maxE(reward) [&lt;=10]: &lt;&gt; T == 10</formula>
			<comment />
		</query>
		<query>
			<formula>saveStrategy("/home/albot/Desktop/passingstrat3",BestPasses)</formula>
			<comment />
		</query>
	</queries>
</nta>