<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int girls = 5;

typedef int[0, girls - 1] girl_id_t;

chan phone_line[girls];

bool secrets[girls][girls];

int phone_calls = 0;

clock glo_cl;

bool is_sequential = false;

bool busy_line = false;

void exchange_secrets(girl_id_t my_id, girl_id_t her_id){
    int i = 0;
    while (i &lt; girls){
        secrets[her_id][i] |= secrets[my_id][i];
        secrets[my_id][i] |= secrets[her_id][i];
        i++;
    }
}

void init_secrets(girl_id_t my_id){
    secrets[my_id][my_id] = true;
}</declaration>
	<template>
		<name>Girl</name>
		<parameter>girl_id_t id, bool is_sequential, bool is_single_line, bool is_circular</parameter>
		<declaration>girl_id_t cur_caller;
clock cl;

bool is_legal_call(int p){
    if(is_circular){
        return ((id + 1) % girls) == p &amp;&amp; !(busy_line &amp;&amp; is_single_line);
    }
    if(is_sequential){
        return p == id + 1 &amp;&amp; !(busy_line &amp;&amp; is_single_line);
    }
    else {
        return p != id &amp;&amp; !(busy_line &amp;&amp; is_single_line);
    }
} </declaration>
		<location id="id0" x="-4428" y="-1139">
			<name x="-4505" y="-1122">out_call</name>
			<label kind="invariant" x="-4428" y="-1122">cl &lt;= 60</label>
		</location>
		<location id="id1" x="-4428" y="-1334">
			<name x="-4462" y="-1368">free</name>
		</location>
		<location id="id2" x="-4624" y="-1334">
		</location>
		<location id="id3" x="-4428" y="-1513">
			<name x="-4419" y="-1539">inc_call</name>
			<label kind="invariant" x="-4513" y="-1530">cl &lt;= 60</label>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-4343" y="-1411">cl == 60</label>
			<nail x="-4326" y="-1428"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="select" x="-4726" y="-1266">p : girl_id_t</label>
			<label kind="guard" x="-4726" y="-1232">is_legal_call(p)</label>
			<label kind="synchronisation" x="-4726" y="-1215">phone_line[p]!</label>
			<label kind="assignment" x="-4802" y="-1249">cur_caller = p, cl = 0, phone_calls++, busy_line = true</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-4249" y="-1232">cl == 60</label>
			<label kind="assignment" x="-4326" y="-1249">exchange_secrets(id, cur_caller), busy_line = false</label>
			<nail x="-4326" y="-1232"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-4547" y="-1445">phone_line[id]?</label>
			<label kind="assignment" x="-4547" y="-1428">cl = 0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-4581" y="-1334">init_secrets(id)</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
// List one or more processes to be composed into a system.
SeqGirl(const girl_id_t id) = Girl(id, true, false, false);
Single_Line_Girl(const girl_id_t id) = Girl(id, false, true, false);
Non_Seq_Girl(const girl_id_t id) = Girl(id, false, false, false);
Circ_Girl(const girl_id_t id) = Girl(id, false, false, true);
system Non_Seq_Girl;
    </system>
	<queries>
		<query>
			<formula>E&lt;&gt; forall (a : girl_id_t) forall (b : girl_id_t) secrets[a][b] == true</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
